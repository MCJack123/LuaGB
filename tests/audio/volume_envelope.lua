describe("Audio", function()
  describe("VolumeEnvelope", function()
    setup(function()
      VolumeEnvelope = require("gameboy/audio/volume_envelope")
    end)
    it("can be created", function()
      envelope = VolumeEnvelope:new()
      assert.are_not_same(envelope, nil)
    end)
    it("applies adjustment to volume when clocked", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(7)
      envelope:setAdjustment(1)
      envelope:clock()
      assert.are_same(8, envelope:volume())
    end)
    it("volume must not exceed 15", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(15)
      envelope:setAdjustment(1)
      envelope:clock()
      assert.are_same(15, envelope:volume())
    end)
    it("volume must remain >= 0", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(0)
      envelope:setAdjustment(-1)
      envelope:clock()
      assert.are_same(0, envelope:volume())
    end)
    it("dividing timer adjusts volume when clocked", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(7)
      envelope:setAdjustment(1)
      envelope.timer:reload(10)
      envelope.timer:advance(10)
      assert.are_same(8, envelope:volume())
    end)
    it("GB quirk: volume is NOT adjusted if timer period == 8", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(7)
      envelope:setAdjustment(1)
      envelope.timer:reload(8)
      envelope.timer:advance(8)
      assert.are_same(7, envelope:volume())
      envelope:clock()
      assert.are_same(7, envelope:volume())
    end)
    it("output waveform is either vol+ or vol-", function()
      envelope = VolumeEnvelope:new()
      envelope:setVolume(7)
      assert.are_same(-7, envelope:output(0))
      assert.are_same(7, envelope:output(1))
    end)
  end)
end)