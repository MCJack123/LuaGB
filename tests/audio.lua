describe("Audio", function()
  describe("DividingTimer", function()
    setup(function()
      DividingTimer = require("gameboy/audio/dividing_timer")
    end)
    it("can be created", function()
      local timer = DividingTimer:new()
      assert.are_not_same(timer, nil)
    end)
    it("period can be set", function()
      local timer = DividingTimer:new()
      timer:setPeriod(10)
      assert.are_same(timer.period(), 10)
    end)
    it("uses the current period when reloaded with no arguments", function()
      local timer = DividingTimer:new()
      timer:setPeriod(10)
      timer:reload()
      assert.are_same(timer.remainingClocks(), 10)
    end)
    it("can be reloaded with an argument to also set the period", function()
      local timer = DividingTimer:new()
      timer:reload(20)
      assert.are_same(timer.period(), 20)
      assert.are_same(timer.remainingClocks(), 20)
    end)
    it("can be clocked once", function()
      local timer = DividingTimer:new()
      timer:reload(10)      
      timer:clock()
      assert.are_same(timer.remainingClocks(), 9)
    end)
    it("single clocks can reset the timer", function()
      local timer = DividingTimer:new()
      -- set the initial period to 1, so the next clock resets
      timer:reload(1) 
      -- set the period to higher than 1, so we can detect the
      -- change. We do this because a period of 1 should reset
      -- back to one after a single clock, which we can't
      -- detect.
      timer:setPeriod(10)
      assert.are_same(timer.remainingClocks(), 1)
      timer:clock()
      assert.are_same(timer.remainingClocks(), 10)
    end)
    it("can be advanced multiple clocks", function()
      local timer = DividingTimer:new()
      timer:reload(10)
      -- advances multiple clocks at once
      timer:advance(5)
      assert.are_same(timer.remainingClocks(), 5)
    end)
    it("advancing multiple clocks can reset the timer", function()
      local timer = DividingTimer:new()
      timer:reload(5)
      -- Again, set the period to be different than the current period,
      -- so we can detect that a reset occurred
      timer:setPeriod(10)
      timer:advance(5)
      assert.are_same(timer.remainingClocks(), 10)
    end)
    it("setPeriod does not affect remaining clocks", function()
      local timer = DividingTimer:new()
      timer:reload(10)
      timer:clock()
      timer:setPeriod(20)
      assert.are_same(timer.remainingClocks(), 9)
    end)
    it("work is performed when the timer resets", function()
      local work = spy.new(function() end)
      local timer = DividingTimer:new()
      timer:onReset(work) -- spy on timer resets
      timer:reload(10)
      timer:advance(10)
      assert.spy(work).was.called()
    end)
    it("advancing multiple periods performs work multiple times", function()
      local work = spy.new(function() end)
      local timer = DividingTimer:new()
      timer:onReset(work) -- spy on timer resets
      timer:reload(10)
      timer:advance(20)
      assert.spy(work).was.called(2) -- twice
    end)
    it("advancing through a reset handles remainder correctly", function()
      local timer = DividingTimer:new()
      timer:reload(10)
      timer:advance(15)
      assert.are_same(timer:remainingClocks(), 5)
    end)
  end)
end)